/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatsDialog.java
 *
 * Created on Apr 24, 2010, 7:00:27 PM
 */

package danielknowlesprojectjava.components;

import java.awt.Frame;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lee
 */
public class GAPerformanceDialog extends javax.swing.JDialog {

    /** Creates new form StatsDialog */
    public GAPerformanceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Creates a new GA Stats Dialog Frame
     * @param parent the environment frame
     * @param avgFit list of average fitness scores
     * @param highFit list of highest fitness scores
     */
    public GAPerformanceDialog(EnvironmentFrame parent,
            ArrayList<Double> avgFit, ArrayList<Double> highFit) {
        //super((Frame) parent, false);

        initComponents();
        setTableContents(avgFit, highFit);
    }

    /**
     * Populates the performance table with each generation's statistics.
     * @param avgFit the average fitness scores
     * @param genFit the highest fitness scores
     */
    private void setTableContents(ArrayList<Double> avgFit,
            ArrayList<Double> highFit) {
        //if (avgFit == null) return;

        // get the table's model
        DefaultTableModel model = (DefaultTableModel) performanceTable.getModel();
        
        // the data to put in each row
        String[] rowData = new String[3];

        // iterate through the lists of fitness scores
        for (int i = 0; i < avgFit.size(); i++) {
            rowData[0] = String.valueOf(i+1); // generation number
            rowData[1] = String.valueOf(avgFit.get(i));  // average fitness
            rowData[2] = String.valueOf(highFit.get(i)); // highest fitness

            // add the new row
            model.addRow(rowData);
        }
    }

    /**
     * Add a row to the performance table.
     * @param genNumber the generation number
     * @param avgFit the average fitness for the generation
     * @param highFit the highest fitness for the generation
     */
    public void addTableRow(int genNumber, double avgFit, double highFit) {
        // get the table's model
        DefaultTableModel model = (DefaultTableModel) performanceTable.getModel();
        // the data to put in each row
        String[] rowData = new String[3];
        // add generation number to the row
        rowData[0] = String.valueOf(genNumber);
        // add average fitness for the generation
        rowData[1] = String.valueOf(avgFit);
        // add highest fitness for the generation
        rowData[2] = String.valueOf(highFit);

        // add the row to the table
        model.addRow(rowData);
    }

    void clearTable() {
         // get the table's model
        DefaultTableModel model = (DefaultTableModel) performanceTable.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            model.removeRow(i);
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        performanceTable = new javax.swing.JTable();

        setTitle("GA Performance Stats");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMinimumSize(new java.awt.Dimension(200, 600));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 600));

        performanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Generation", "Average Fitness", "Highest Fitness"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        performanceTable.setFillsViewportHeight(true);
        performanceTable.setPreferredSize(new java.awt.Dimension(100, 64));
        jScrollPane2.setViewportView(performanceTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GAPerformanceDialog dialog = new GAPerformanceDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable performanceTable;
    // End of variables declaration//GEN-END:variables

}
